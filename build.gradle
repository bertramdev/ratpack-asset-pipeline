buildscript {
  repositories {
    jcenter()
  }
  dependencies {
  }
}

plugins {
    id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

group = 'com.bertramlabs.plugins'
version = '2.5.1'

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "http://oss.jfrog.org/artifactory/repo" }
}

configurations {
    provided
}
sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

ext {
  isReleaseVersion = !version.endsWith("SNAPSHOT")
  slf4jVersion = "1.7.10"
  ratpackVersion = "0.9.19"
  spockVersion = "1.0-groovy-2.4"
  cglibVersion = "2.2.2"
  objenesisVersion = "2.1"
  groovyVersion = "2.4.3"
}

dependencies {
  compile "com.bertramlabs.plugins:asset-pipeline-core:2.5.0"
  compile "io.ratpack:ratpack-guice:${ratpackVersion}"
  compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
  runtime "org.slf4j:slf4j-simple:${slf4jVersion}"
  testCompile "org.spockframework:spock-core:${spockVersion}"
  testCompile "cglib:cglib:${cglibVersion}"
  testCompile "org.objenesis:objenesis:${objenesisVersion}"
  testCompile "io.ratpack:ratpack-test:${ratpackVersion}"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'ratpack-asset-pipeline'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'ratpack-asset-pipeline'
                    description 'Provides asset-pipeline integration with the ratpack framework.'
                    url 'https://github.com/bertramdev/ratpack-asset-pipeline'
                    scm {
                        url 'https://github.com/bertramdev/ratpack-asset-pipeline'
                        connection 'scm:https://bertramdev@github.com/bertramdev/ratpack-asset-pipeline.git'
                        developerConnection 'scm:git://github.com/bertramdev/ratpack-asset-pipeline.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'davydotcom'
                            name 'David Estes'
                            email 'davydotcom@gmail.com'
                        }
                    }
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            credentials {
                username project.properties.get('artifactoryPublishUsername')
                password project.properties.get('artifactoryPublishPassword')
            }
            url "https://repo.grails.org/grails/libs-snapshots-local/"
        }
    }
}

bintray {
    if(project.hasProperty('bintrayUser')) {
        user = bintrayUser
        key = bintrayKey
    }

    publications = ['maven']
    pkg {
        repo = 'asset-pipeline'
        userOrg = 'bertramlabs'
        name = 'ratpack-asset-pipeline'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/bertramdev/ratpack-asset-pipeline'
        issueTrackerUrl = 'https://github.com/bertramdev/ratpack-asset-pipeline/issues'
        vcsUrl = 'https://github.com/bertramdev/ratpack-asset-pipeline.git'
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

idea {
  project {
    jdkName "1.8"
    languageLevel "1.8"
    ipr {
      withXml { provider ->
        def node = provider.asNode()
        node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'

        def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
        copyrightManager.@default = "ASL2"
        def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "ASL2" }
        if (aslCopyright == null) {
          copyrightManager.append(new XmlParser().parseText("""
            <copyright>
              <option name="notice" value="Copyright \$today.year the original author or authors.&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;   http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
              <option name="keyword" value="Copyright" />
              <option name="allowReplaceKeyword" value="" />
              <option name="myName" value="ASL2" />
              <option name="myLocal" value="true" />
            </copyright>
          """))
        }

        def module2copyright = copyrightManager.module2copyright.first()
        def productionCodeModule = module2copyright.find { it.element.find { it.@module == "Production" }?.@value == "ASL2" }
        if (productionCodeModule == null) {
          module2copyright.append(new XmlParser().parseText("""
              <element module="Production" copyright="ASL2" />
          """))
        }
      }
    }
  }
}